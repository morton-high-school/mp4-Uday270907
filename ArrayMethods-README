Your goal is to create an array utility class called IntArrayMethods.java. You
will be required to write several methods which are listed below. An autograder
is provided for you to test your code.

public static int arraySum(int[] a)
  arraySum sums the values of the integers contained in the given array and
  returns that value.

public static double arrayMean(int[] a)
  arrayMean calculates the average of the values of the given array and returns
  that value as a double

public static int arrayMin(int[] a)
  arrayMin finds the minimum value that occurs in the array and returns that
  value.

public static int arrayMax(int[] a)
  arrayMax finds the maximum value that occurs in the array and returns that
  value.

public static boolean[] arrayLocalMin(int[] a)
  arrayLocalMin determines the locations of any local minimums in the array. A
  local minimum is defined as a value that is strictly less than either of its
  neighbors. arrayLocalMin returns an array of booleans where the value at
  each index is true if the value in the original array is a local minimum and
  false otherwise.

public static boolean[] arrayLocalMax(int[] a)
  arrayLocalMax determines the locations of any local maximums in the array. A
  local maximum is defined as a value that is strictly greater than either of its
  neighbors. arrayLocalMax returns an array of booleans where the value at
  each index is true if the value in the original array is a local maximum and
  false otherwise.

public static int arrayMode(int[] a)
  arrayMode finds the mode of the array. If multiple modes occur, then arrayMode
  returns the value of the first mode that occurs in the array.

public static int arrayCount(int[] a, int b)
  arrayCount determines the number of occurences of the parameter b in the array
  and returns that value.

public static boolean arrayContainsDuplicates(int[] a)
  arrayCountainsDuplicates determines if any duplicate values exist within the
  array and returns true if this occurs and false otherwise.

public static boolean arrayAllEqual(int[] a)
  arrayAllEqual determines if all of the items in the array are the same and
  returns true if this is the case and false otherwise.

public static double[] arrayRollingAverage(int[] a, int b)
  arrayRollingAverage calculates a rolling average of b values for each index in
  the array. These values are stored and then returned in an array of doubles.
  For example, the returned value at index i should contain the average of the
  value at index i and the additional b-1 values before it. If less than b-1
  values occur before index i, then an average will be calculated using just the
  existing values.

public static int[] arrayShift(int[] a, int b)
  arrayShift returns an array of values shifted by b places from the original
  array. For example, an item at index i will be shifted to index i+b. If i+b is
  out of bounds of the array, then values should wrap back around to the start
  of the array.

public static int[] arrayReverse(int[] a)
  arrayReverse returns the original array in reverse order.
